-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


ALTER TABLE IF EXISTS public.counterparty DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public.multifamily_unit DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public.multifamily_unit DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public.multifamily_unit DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public.resident DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public.resident DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public.resident DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public.compliance_inspection DROP CONSTRAINT IF EXISTS None;



DROP TABLE IF EXISTS public.counterparty;

CREATE TABLE IF NOT EXISTS public.counterparty
(
    counterparty_id integer NOT NULL DEFAULT nextval('counterparty_counterparty_id_seq'::regclass),
    name character varying(100) COLLATE pg_catalog."default",
    type character varying(50) COLLATE pg_catalog."default",
    address character varying(100) COLLATE pg_catalog."default",
    phone character varying(20) COLLATE pg_catalog."default",
    email character varying(100) COLLATE pg_catalog."default",
    credit_score numeric(5, 2),
    income_data numeric(15, 2),
    CONSTRAINT counterparty_pkey PRIMARY KEY (counterparty_id)
);

DROP TABLE IF EXISTS public.multifamily_unit;

CREATE TABLE IF NOT EXISTS public.multifamily_unit
(
    unit_id integer NOT NULL DEFAULT nextval('multifamily_unit_unit_id_seq'::regclass),
    address character varying(100) COLLATE pg_catalog."default",
    number_of_units integer,
    building_type character varying(50) COLLATE pg_catalog."default",
    amenities text COLLATE pg_catalog."default",
    year_built integer,
    square_footage numeric(10, 2),
    section8_contract character(1) COLLATE pg_catalog."default",
    section8_contract_details text COLLATE pg_catalog."default",
    CONSTRAINT multifamily_unit_pkey PRIMARY KEY (unit_id)
);

DROP TABLE IF EXISTS public."multifamilyUnit_counterparty";

CREATE TABLE IF NOT EXISTS public."multifamilyUnit_counterparty"
(
    multifamily_unitid bigint,
    counterparty_id bigint
);

DROP TABLE IF EXISTS public.risk_assessment;

CREATE TABLE IF NOT EXISTS public.risk_assessment
(
    id integer NOT NULL DEFAULT nextval('risk_assessment_id_seq'::regclass),
    multifamily_unit_id integer,
    counterparty_id integer,
    risk_event_id integer,
    risk_score numeric(5, 2),
    mitigation_strategy text COLLATE pg_catalog."default",
    multifamily_unitid bigint,
    CONSTRAINT risk_assessment_pkey PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.resident;

CREATE TABLE IF NOT EXISTS public.resident
(
    resident_id integer NOT NULL DEFAULT nextval('resident_resident_id_seq'::regclass),
    name character varying(100) COLLATE pg_catalog."default",
    address character varying(100) COLLATE pg_catalog."default",
    phone character varying(20) COLLATE pg_catalog."default",
    email character varying(100) COLLATE pg_catalog."default",
    voucher_id character varying(50) COLLATE pg_catalog."default",
    program_type character varying(50) COLLATE pg_catalog."default",
    income_verification_details text COLLATE pg_catalog."default",
    move_in_date date,
    lease_agreement_details text COLLATE pg_catalog."default",
    CONSTRAINT resident_pkey PRIMARY KEY (resident_id)
);

DROP TABLE IF EXISTS public.resident_selection;

CREATE TABLE IF NOT EXISTS public.resident_selection
(
    id integer NOT NULL DEFAULT nextval('resident_selection_id_seq'::regclass),
    resident_id integer,
    application_date date,
    selection_criteria text COLLATE pg_catalog."default",
    selection_status character varying(10) COLLATE pg_catalog."default",
    CONSTRAINT resident_selection_pkey PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.resident_lease;

CREATE TABLE IF NOT EXISTS public.resident_lease
(
    id integer NOT NULL DEFAULT nextval('resident_lease_id_seq'::regclass),
    resident_id integer,
    multifamily_unit_id integer,
    lease_start_date date,
    lease_end_date date,
    rent_amount numeric(10, 2),
    CONSTRAINT resident_lease_pkey PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.compliance_inspection;

CREATE TABLE IF NOT EXISTS public.compliance_inspection
(
    id integer NOT NULL DEFAULT nextval('compliance_inspection_id_seq'::regclass),
    multifamily_unit_id integer,
    inspection_date date,
    inspector_name character varying(100) COLLATE pg_catalog."default",
    inspection_report text COLLATE pg_catalog."default",
    compliance_status character varying(10) COLLATE pg_catalog."default",
    CONSTRAINT compliance_inspection_pkey PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."multifamilyUnit_inspection";

CREATE TABLE IF NOT EXISTS public."multifamilyUnit_inspection"
(
    multifamily_unitid bigint,
    inspection_id bigint
);

DROP TABLE IF EXISTS public.resident_support;

CREATE TABLE IF NOT EXISTS public.resident_support
(
    id integer NOT NULL DEFAULT nextval('resident_support_id_seq'::regclass),
    resident_id integer,
    support_service_type character varying(100) COLLATE pg_catalog."default",
    service_provider character varying(100) COLLATE pg_catalog."default",
    service_start_date date,
    service_end_date date,
    CONSTRAINT resident_support_pkey PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.fair_housing_complaint;

CREATE TABLE IF NOT EXISTS public.fair_housing_complaint
(
    complaint_id integer NOT NULL DEFAULT nextval('fair_housing_complaint_complaint_id_seq'::regclass),
    date_received date,
    complainant_name character varying(100) COLLATE pg_catalog."default",
    complaint_details text COLLATE pg_catalog."default",
    resolution_details text COLLATE pg_catalog."default",
    CONSTRAINT fair_housing_complaint_pkey PRIMARY KEY (complaint_id)
);

DROP TABLE IF EXISTS public.mf_rentstab_integrated;

CREATE TABLE IF NOT EXISTS public.mf_rentstab_integrated
(
    zip character varying(5) COLLATE pg_catalog."default",
    bldgno1 character varying(30) COLLATE pg_catalog."default",
    street1 character varying(50) COLLATE pg_catalog."default",
    stsufx1 character varying(30) COLLATE pg_catalog."default",
    bldgno2 character varying(30) COLLATE pg_catalog."default",
    street2 character varying(50) COLLATE pg_catalog."default",
    stsufx2 character varying(30) COLLATE pg_catalog."default",
    city character varying(50) COLLATE pg_catalog."default",
    county character varying(50) COLLATE pg_catalog."default",
    status1 character varying(30) COLLATE pg_catalog."default",
    status2 character varying(30) COLLATE pg_catalog."default",
    status3 character varying(30) COLLATE pg_catalog."default",
    block character varying(30) COLLATE pg_catalog."default",
    lot character varying(30) COLLATE pg_catalog."default",
    key_col1 character varying(30) COLLATE pg_catalog."default",
    ucbbl character varying(30) COLLATE pg_catalog."default",
    uc2021 character varying(30) COLLATE pg_catalog."default"
);

ALTER TABLE IF EXISTS public.counterparty
    ADD FOREIGN KEY (counterparty_id)
    REFERENCES public."multifamilyUnit_counterparty" (counterparty_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.multifamily_unit
    ADD FOREIGN KEY (unit_id)
    REFERENCES public."multifamilyUnit_counterparty" (multifamily_unitid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.multifamily_unit
    ADD FOREIGN KEY (unit_id)
    REFERENCES public.risk_assessment (multifamily_unit_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.multifamily_unit
    ADD FOREIGN KEY (unit_id)
    REFERENCES public."multifamilyUnit_inspection" (multifamily_unitid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.resident
    ADD FOREIGN KEY (resident_id)
    REFERENCES public.resident_selection (resident_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.resident
    ADD FOREIGN KEY (resident_id)
    REFERENCES public.resident_lease (resident_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.resident
    ADD FOREIGN KEY (resident_id)
    REFERENCES public.resident_support (resident_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.compliance_inspection
    ADD FOREIGN KEY (id)
    REFERENCES public."multifamilyUnit_inspection" (inspection_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;